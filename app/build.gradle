apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
	compileSdkVersion 26
	buildToolsVersion "26.0.2"
	defaultConfig {
		applicationId "com.ledgerleopard.androidexampleproject"
		minSdkVersion 15
		targetSdkVersion 26
		versionCode 1
		versionName "1.0"
		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
	}
	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])

	// include modules as a dependency to your project and start using theme!
	compile project(':commons')
	compile project(':systemauthorisation')
	compile project(':balances')
	compile project(':mycustommodule')


	androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
		exclude group: 'com.android.support', module: 'support-annotations'
	})
	compile 'com.android.support:appcompat-v7:26.+'
	compile 'com.android.support.constraint:constraint-layout:1.0.2'
	testCompile 'junit:junit:4.12'
}

class RunApk extends DefaultTask {
	def adbExec;

	@TaskAction
	def runApp() {
		println "running path on device or emulator"
		println "adb:" + adbExec
		def cmd = adbExec + " shell am start -a android.intent.action.MAIN -n com.ledgerleopard.androidexampleproject/com.ledgerleopard.androidexampleproject.SplashActivity"

		println cmd
		def proc = cmd.execute()
		proc.in.eachLine { line -> println line }
		proc.err.eachLine { line -> println 'ERROR: ' + line }
		proc.waitFor()
	}
}

def adb
try {
	Properties properties = new Properties()
	properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
	adb = properties['sdk.dir'] + "/platform-tools/adb"
} catch (Exception ignored) {
	adb = ""
}

tasks.create(name: "runApk", type: RunApk, dependsOn: 'installDebug') {
	adbExec = adb
}
